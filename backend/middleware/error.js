const ErrorHandler = require("../utils/errorHandler")

// Error-handling middleware
/*
Error-handling middleware always takes four arguments. You must provide four arguments to identify it as an error-handling middleware function. Even if you donâ€™t need to use the next object, you must specify it to maintain the signature. Otherwise, the next object will be interpreted as regular middleware and will fail to handle errors.
*/
module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500
  err.message = err.message || "Internal Server Error"
  // Wrong mongodb id error
  if (err.name === "CastError") {
    const message = `Resource not found. Invalid: ${err.path}`
    err = new ErrorHandler(message, 400)
  }

  // Mongoose duplicate key error
  if (err.code === 11000) {
    const message = `Duplicate ${Object.keys(err.keyvalue)} entered`
    err = new ErrorHandler(message, 400)
  }

  // Wrong JWT error
  if (err.name === "JsonWebTokenError") {
    const message = `JSON Web Token is invalid, Try again`
    err = new ErrorHandler(message, 400)
  }

  // Wrong JWT expired error
  if (err.name === "TokenExpiredError") {
    const message = `JSON Web Token has expired, Try again`
    err = new ErrorHandler(message, 400)
  }

  res.status(err.statusCode).json({
    success: false,
    message: err.message,
  })
}
